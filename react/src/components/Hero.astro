---
// Enhanced Hero Section Component with Modern Animations
export interface Props {
    title?: string;
    subtitle?: string;
    description?: string;
    primaryButton?: string;
    secondaryButton?: string;
    heroImage?: string;
}

const {
    title = "Grow Your Business with Strategic Digital Marketing",
    subtitle = "Professional Digital Marketing",
    description = "We help businesses achieve exceptional growth through data-driven digital marketing strategies, creative campaigns, and measurable results that drive real ROI.",
    primaryButton = "Start Your Project",
    secondaryButton = "View Our Services",
    heroImage = "/public/STORMLAB-LOGOArtboard-9.png"
} = Astro.props;
---

<section id="home" class="hero">

    <div class="container">
        <div class="hero-container">
            <div class="hero-content">
                
                <h1 class="hero-title">
                    <span class="title-line">
                        <span class="word" data-word="Grow">Grow</span>
                        <span class="word" data-word="Your">Your</span>
                        <span class="word" data-word="Business">Business</span>
                    </span>
                    <span class="title-line">
                        <span class="word" data-word="with">with</span>
                        <span class="word highlight" data-word="Strategic">Strategic</span>
                    </span>
                    <span class="title-line">
                        <span class="word" data-word="Digital">Digital</span>
                        <span class="word" data-word="Marketing">Marketing</span>
                    </span>
                </h1>
                
                <p class="hero-description">
                    <span class="description-line">{description}</span>
                </p>
                
                <div class="hero-buttons">
                    <a href="#contact" class="btn-primary enhanced">
                        <span class="btn-content">
                            <span class="btn-text">{primaryButton}</span>
                        </span>
                        <div class="btn-ripple"></div>
                    </a>
                    <a href="#services" class="btn-secondary enhanced">
                        <span class="btn-content">
                            <span class="btn-text">{secondaryButton}</span>
                        </span>
                        <div class="btn-ripple"></div>
                    </a>
                </div>

                <!-- <div class="hero-stats">
                    <div class="stat-item">
                        <span class="stat-number" data-count="500">0</span>
                        <span class="stat-label">Projects</span>
                    </div>
                    <div class="stat-divider"></div>
                    <div class="stat-item">
                        <span class="stat-number" data-count="98">0</span>
                        <span class="stat-percent">%</span>
                        <span class="stat-label">Success Rate</span>
                    </div>
                    <div class="stat-divider"></div>
                    <div class="stat-item">
                        <span class="stat-number" data-count="250">0</span>
                        <span class="stat-plus">+</span>
                        <span class="stat-label">Happy Clients</span>
                    </div>
                </div> -->
            </div>
            
            <div class="hero-visual">
                <div class="image-container">
                    <div class="image-backdrop"></div>
                    <div class="image-frame">
                        <img src={heroImage} alt="StormLab Digital Marketing" class="hero-image" />
                        <div class="image-overlay"></div>
                    </div>
                    
                    <!-- Floating Elements -->
                    <div class="floating-elements">
                        
                        <div class="floating-card card-2">
                            <div class="card-icon">ðŸŽ¯</div>
                            <div class="card-content">
                                <div class="card-title">Conversion</div>
                                <div class="card-value">x3.5</div>
                            </div>
                        </div>
                        
                        <div class="floating-card card-3">
                            <div class="card-icon">âš¡</div>
                            <div class="card-content">
                                <div class="card-title">Speed</div>
                                <div class="card-value">Fast</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</section>

<style>
    /* ================================
       ENHANCED HERO SECTION STYLES
    ================================ */
    .hero {
        min-height: 100vh;
        display: flex;
        align-items: center;
        position: relative;
        overflow: hidden;
        padding-top: 4em;
    }

    /* Hero Container */
    .hero-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 4rem;
        align-items: center;
        position: relative;
        z-index: 2;
        min-height: 100vh;
        padding: 2rem 0;
    }

    .hero-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    /* Enhanced Title */
    .hero-title {
        font-size: clamp(2.5rem, 5vw, 4rem);
        font-weight: 800;
        line-height: 1.1;
        color: var(--primary-black);
        letter-spacing: -0.02em;
    }

    .title-line {
        display: block;
        overflow: hidden;
    }

    .word {
        display: inline-block;
        margin-right: 0.3em;
        opacity: 0;
        transform: translateY(100%);
        animation: wordSlideUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    }

    .word:nth-child(1) { animation-delay: 0.8s; }
    .word:nth-child(2) { animation-delay: 0.9s; }
    .word:nth-child(3) { animation-delay: 1.0s; }
    .word:nth-child(4) { animation-delay: 1.1s; }
    .word:nth-child(5) { animation-delay: 1.2s; }
    .word:nth-child(6) { animation-delay: 1.3s; }
    .word:nth-child(7) { animation-delay: 1.4s; }

    .word.highlight {
        position: relative;
        background: linear-gradient(135deg, #000000 0%, #333333 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .word.highlight::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 6px;
        background: linear-gradient(90deg, #000000 0%, #666666 100%);
        opacity: 0.2;
        animation: highlightExpand 1s ease 1.5s both;
        transform: scaleX(0);
        transform-origin: left;
    }

    /* Enhanced Description */
    .hero-description {
        font-size: 1.25rem;
        color: var(--medium-gray);
        line-height: 1.6;
        max-width: 500px;
    }

    .description-line {
        display: inline-block;
        opacity: 0;
        animation: fadeInUp 1s ease 1.6s both;
    }

    /* Enhanced Buttons */
    .hero-buttons {
        display: flex;
        gap: 1rem;
        opacity: 0;
        animation: slideUp 1s ease 1.8s both;
    }

    .btn-primary.enhanced,
    .btn-secondary.enhanced {
        position: relative;
        overflow: hidden;
        transform: perspective(1000px) rotateX(0deg);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .btn-content {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        z-index: 2;
        transition: transform 0.3s ease;
    }

    .btn-ripple {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: rgba(255,255,255,0.3);
        border-radius: 50%;
        transform: translate(-50%, -50%);
        transition: all 0.6s ease;
        z-index: 1;
    }

    .btn-primary.enhanced:hover,
    .btn-secondary.enhanced:hover {
        transform: perspective(1000px) rotateX(-5deg) translateY(-5px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .btn-primary.enhanced:hover .btn-ripple,
    .btn-secondary.enhanced:hover .btn-ripple {
        width: 300px;
        height: 300px;
    }

    /* Hero Stats */
    .hero-stats {
        display: flex;
        align-items: center;
        gap: 2rem;
        opacity: 0;
        animation: slideUp 1s ease 2s both;
        margin-top: 1rem;
    }

    .stat-item {
        display: flex;
        align-items: baseline;
        gap: 0.25rem;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 800;
        color: var(--primary-black);
        background: linear-gradient(135deg, #000000 0%, #444444 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .stat-percent,
    .stat-plus {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--medium-gray);
    }

    .stat-label {
        font-size: 0.9rem;
        color: var(--medium-gray);
        font-weight: 500;
        margin-left: 0.5rem;
    }

    .stat-divider {
        width: 1px;
        height: 30px;
        background: var(--border-gray);
    }

    /* Enhanced Visual Section */
    .hero-visual {
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        opacity: 0;
        animation: slideInRight 1s ease 1s both;
    }

    .image-container {
        position: relative;
        width: 100%;
        max-width: 500px;
    }

    .image-backdrop {
        position: absolute;
        top: -20px;
        left: -20px;
        right: -20px;
        bottom: -20px;
        background: linear-gradient(135deg, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0.05) 100%);
        border-radius: 20px;
        transform: rotate(3deg);
        animation: backdropFloat 6s ease-in-out infinite;
    }

    .image-frame {
        position: relative;
        border-radius: 16px;
        overflow: hidden;
        background: var(--pure-white);
        box-shadow: 0 30px 60px rgba(0,0,0,0.15);
        transform: rotate(-2deg);
        animation: frameFloat 8s ease-in-out infinite;
    }

    .hero-image {
        width: 100%;
        height: auto;
        display: block;
        transition: transform 0.3s ease;
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.1) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .image-container:hover .hero-image {
        transform: scale(1.05);
    }

    .image-container:hover .image-overlay {
        opacity: 1;
    }

    /* Floating Cards */
    .floating-elements {
        position: absolute;
        width: 100%;
        height: 100%;
    }

    .floating-card {
        position: absolute;
        background: var(--pure-white);
        border-radius: 12px;
        padding: 1rem 1.5rem;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid var(--border-gray);
        display: flex;
        align-items: center;
        gap: 0.75rem;
        backdrop-filter: blur(10px);
        animation: cardFloat 6s ease-in-out infinite;
    }

    .card-2 {
        bottom: 20%;
        left: -25%;
        animation-delay: 2s;
    }

    .card-3 {
        top: 60%;
        right: -15%;
        animation-delay: 4s;
    }

    .card-icon {
        font-size: 1.5rem;
        animation: iconPulse 3s ease-in-out infinite;
    }

    .card-title {
        font-size: 0.8rem;
        color: var(--medium-gray);
        font-weight: 500;
    }

    .card-value {
        font-size: 1.2rem;
        color: var(--primary-black);
        font-weight: 700;
    }

    /* Animations */
    @keyframes orbFloat {
        0%, 100% { transform: translate(0, 0) rotate(0deg); }
        25% { transform: translate(-20px, -20px) rotate(90deg); }
        50% { transform: translate(20px, -10px) rotate(180deg); }
        75% { transform: translate(-10px, 20px) rotate(270deg); }
    }

    @keyframes gridMove {
        0% { transform: translate(0, 0); }
        100% { transform: translate(50px, 50px); }
    }

    @keyframes slideUp {
        from { 
            opacity: 0; 
            transform: translateY(30px); 
        }
        to { 
            opacity: 1; 
            transform: translateY(0); 
        }
    }

    @keyframes slideInRight {
        from { 
            opacity: 0; 
            transform: translateX(50px); 
        }
        to { 
            opacity: 1; 
            transform: translateX(0); 
        }
    }

    @keyframes wordSlideUp {
        to { 
            opacity: 1; 
            transform: translateY(0); 
        }
    }

    @keyframes highlightExpand {
        to { 
            transform: scaleX(1); 
        }
    }

    @keyframes fadeInUp {
        from { 
            opacity: 0; 
            transform: translateY(20px); 
        }
        to { 
            opacity: 1; 
            transform: translateY(0); 
        }
    }

    @keyframes backdropFloat {
        0%, 100% { transform: rotate(3deg) scale(1); }
        50% { transform: rotate(5deg) scale(1.02); }
    }

    @keyframes frameFloat {
        0%, 100% { transform: rotate(-2deg) translateY(0px); }
        50% { transform: rotate(-1deg) translateY(-10px); }
    }

    @keyframes cardFloat {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-15px) rotate(2deg); }
    }

    @keyframes iconPulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.1); }
    }

    @keyframes scrollBounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }

    @keyframes bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
        .hero-container {
            grid-template-columns: 1fr;
            text-align: center;
            gap: 3rem;
        }

        .hero-visual {
            order: -1;
        }

        .hero-stats {
            justify-content: center;
        }

        .floating-card {
            display: none;
        }

        .hero-buttons {
            flex-direction: column;
            align-items: center;
        }
    }

    @media (max-width: 480px) {
        .hero-stats {
            flex-direction: column;
            gap: 1rem;
        }

        .stat-divider {
            width: 50px;
            height: 1px;
        }
    }
</style>

<script>
    // ================================
    // ENHANCED HERO ANIMATIONS & INTERACTIONS
    // ================================
    document.addEventListener('DOMContentLoaded', function() {
        // Counter Animation for Stats
        function animateCounter(element, target, duration = 2000) {
            let startTime = null;
            const startValue = 0;
            
            function updateCounter(currentTime) {
                if (startTime === null) startTime = currentTime;
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1);
                
                // Easing function
                const easeOut = 1 - Math.pow(1 - progress, 3);
                const currentValue = Math.round(startValue + (target - startValue) * easeOut);
                
                element.textContent = currentValue;
                
                if (progress < 1) {
                    requestAnimationFrame(updateCounter);
                }
            }
            
            requestAnimationFrame(updateCounter);
        }

        // Initialize counters when visible
        const statNumbers = document.querySelectorAll('.stat-number[data-count]');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const target = parseInt(entry.target.getAttribute('data-count'));
                    animateCounter(entry.target, target);
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.5 });

        statNumbers.forEach(stat => observer.observe(stat));

        // Enhanced Parallax Effects
        let ticking = false;
        function updateParallax() {
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.5;
            const orbs = document.querySelectorAll('.orb');
            
            // Parallax for orbs
            orbs.forEach((orb, index) => {
                const speed = 0.2 + (index * 0.1);
                orb.style.transform = `translate(${scrolled * speed * 0.1}px, ${scrolled * speed}px)`;
            });
            
            ticking = false;
        }

        function requestTick() {
            if (!ticking) {
                requestAnimationFrame(updateParallax);
                ticking = true;
            }
        }

        window.addEventListener('scroll', requestTick);

        // Button Ripple Effect
        const enhancedButtons = document.querySelectorAll('.btn-primary.enhanced, .btn-secondary.enhanced');
        enhancedButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                const ripple = this.querySelector('.btn-ripple');
                ripple.style.width = '300px';
                ripple.style.height = '300px';
                
                setTimeout(() => {
                    ripple.style.width = '0';
                    ripple.style.height = '0';
                }, 600);
            });
        });

        // Interactive cursor effect for hero image
        const imageContainer = document.querySelector('.image-container');
        if (imageContainer) {
            imageContainer.addEventListener('mousemove', function(e) {
                const rect = this.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                const centerX = rect.width / 2;
                const centerY = rect.height / 2;
                const rotateX = (y - centerY) / 20;
                const rotateY = (centerX - x) / 20;
                
                this.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
            });
            
            imageContainer.addEventListener('mouseleave', function() {
                this.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg)';
            });
        }

        // Add typing effect to hero title (optional)
        function typeWriter(element, text, speed = 100) {
            let i = 0;
            element.innerHTML = '';
            
            function type() {
                if (i < text.length) {
                    element.innerHTML += text.charAt(i);
                    i++;
                    setTimeout(type, speed);
                }
            }
            
            type();
        }

        // Intersection Observer for advanced animations
        const animatedElements = document.querySelectorAll('.word, .floating-card, .hero-badge');
        const animationObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                }
            });
        }, { threshold: 0.1 });

        animatedElements.forEach(el => animationObserver.observe(el));
    });
</script>